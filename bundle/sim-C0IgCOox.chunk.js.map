{"version":3,"file":"sim-C0IgCOox.chunk.js","sources":["../../../ui/warrior/inputs.ts","../../../ui/warrior/presets.ts","../../../ui/warrior/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport {\n\tWarriorShout\n} from '../core/proto/warrior.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const StartingRage = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecWarrior>({\n\tfieldName: 'startingRage',\n\tlabel: 'Starting Rage',\n\tlabelTooltip: 'Initial rage at the start of each iteration.',\n});\n\nexport const StanceSnapshot = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\n\tfieldName: 'stanceSnapshot',\n\tlabel: 'Stance Snapshot',\n\tlabelTooltip: 'Ability that is cast at the same time as stance swap will benefit from the bonus of the stance before the swap.',\n});\n\nexport const ShoutPicker = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'shout',\n\tactionId: () => ActionId.fromSpellId(6673),\n\tvalue: WarriorShout.WarriorShoutBattle,\n});\n","import { Phase } from '../core/constants/other.js';\nimport * as PresetUtils from '../core/preset_utils.js';\nimport {\n\tAgilityElixir,\n\tAlcohol,\n\tArmorElixir,\n\tConsumes,\n\tDebuffs,\n\tEnchantedSigil,\n\tHealthElixir,\n\tIndividualBuffs,\n\tPotions,\n\tProfession,\n\tRaidBuffs,\n\tSaygesFortune,\n\tStrengthBuff,\n\tTristateEffect,\n\tWeaponImbue,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { Warrior_Options as WarriorOptions, WarriorShout } from '../core/proto/warrior.js';\nimport Phase1APLArms from './apls/phase_1_arms.apl.json';\nimport Phase2APLArms from './apls/phase_2_arms.apl.json';\nimport Phase2APLFury from './apls/phase_2_fury.apl.json';\nimport Phase3APLArms from './apls/phase_3_arms.apl.json';\nimport Phase3APLFury from './apls/phase_3_fury.apl.json';\n\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\nimport Phase1DWGear from './gear_sets/phase_1_dw.gear.json';\nimport Phase22HGear from './gear_sets/phase_2_2h.gear.json';\nimport Phase2DWGear from './gear_sets/phase_2_dw.gear.json';\nimport Phase32HGear from './gear_sets/phase_3_2h.gear.json';\nimport Phase3DWGear from './gear_sets/phase_3_dw.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const GearArmsPhase1 = PresetUtils.makePresetGear('P1 Arms 2H', Phase1Gear, { talentTree: 0 });\nexport const GearArmsDWPhase1 = PresetUtils.makePresetGear('P1 Arms DW', Phase1DWGear, { talentTree: 0 });\nexport const GearArmsPhase2 = PresetUtils.makePresetGear('P2 2H', Phase22HGear, { talentTree: 0 });\nexport const GearFuryPhase1 = PresetUtils.makePresetGear('P1 DW Fury', Phase1Gear, { talentTree: 1 });\nexport const GearFuryPhase2 = PresetUtils.makePresetGear('P2 DW', Phase2DWGear, { talentTree: 1 });\nexport const GearArmsPhase3 = PresetUtils.makePresetGear('P3 2H', Phase32HGear, { talentTree: 0 });\nexport const GearFuryPhase3 = PresetUtils.makePresetGear('P3 DW', Phase3DWGear, { talentTree: 1 });\n\nexport const GearPresets = {\n\t[Phase.Phase1]: [GearArmsPhase1, GearFuryPhase1, GearArmsDWPhase1],\n\t[Phase.Phase2]: [GearArmsPhase2, GearFuryPhase2],\n\t[Phase.Phase3]: [GearArmsPhase3, GearFuryPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultGear = GearPresets[Phase.Phase3][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const APLPhase1Arms = PresetUtils.makePresetAPLRotation('P1 Preset Arms', Phase1APLArms);\nexport const APLPhase2Arms = PresetUtils.makePresetAPLRotation('P2 Preset Arms', Phase2APLArms);\nexport const APLPhase2Fury = PresetUtils.makePresetAPLRotation('P2 Preset Fury', Phase2APLFury);\nexport const APLPhase3Arms = PresetUtils.makePresetAPLRotation('P3 Preset Arms', Phase3APLArms);\nexport const APLPhase3Fury = PresetUtils.makePresetAPLRotation('P3 Preset Fury', Phase3APLFury);\n\nexport const APLPresets = {\n\t[Phase.Phase1]: [APLPhase1Arms],\n\t[Phase.Phase2]: [APLPhase2Arms, APLPhase2Fury],\n\t[Phase.Phase3]: [APLPhase3Arms, APLPhase3Fury],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultAPLs: Record<number, Record<number, PresetUtils.PresetRotation>> = {\n\t25: {\n\t\t0: APLPresets[Phase.Phase1][0],\n\t\t1: APLPresets[Phase.Phase1][0],\n\t\t2: APLPresets[Phase.Phase1][0],\n\t},\n\t40: {\n\t\t0: APLPresets[Phase.Phase2][0],\n\t\t1: APLPresets[Phase.Phase2][1],\n\t\t2: APLPresets[Phase.Phase2][0],\n\t},\n\t50: {\n\t\t0: APLPresets[Phase.Phase3][0],\n\t\t1: APLPresets[Phase.Phase3][1],\n\t\t2: APLPresets[Phase.Phase3][0],\n\t},\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsPhase1 = {\n\tname: 'P1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '303220203-01',\n\t}),\n};\n\nexport const TalentsPhase2Fury = {\n\tname: 'P2 Fury',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-05050005405010051',\n\t}),\n};\n\nexport const TalentsPhase2Arms = {\n\tname: 'P2 Arms',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '303050213525100001',\n\t}),\n};\n\nexport const TalentsPhase3Arms = {\n\tname: 'P3 Arms',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '303050213520105001-0505'\n\t}),\n}\n\nexport const TalentPhase3Fury = {\n\tname: 'P3 Fury',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '303040003-0505000540501003'\n\t}),\n}\n\n\nexport const TalentPresets = {\n\t[Phase.Phase1]: [TalentsPhase1],\n\t[Phase.Phase2]: [TalentsPhase2Arms, TalentsPhase2Fury],\n\t[Phase.Phase3]: [TalentsPhase3Arms, TalentPhase3Fury],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultTalentsFury = TalentPresets[Phase.Phase2][1];\nexport const DefaultTalentsArms = TalentPresets[Phase.Phase3][0];\n\nexport const DefaultTalents = DefaultTalentsArms;\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = WarriorOptions.create({\n\tstartingRage: 0,\n\tuseRecklessness: true,\n\tshout: WarriorShout.WarriorShoutBattle,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tagilityElixir: AgilityElixir.ElixirOfAgility,\n\tdragonBreathChili: true,\n\tenchantedSigil: EnchantedSigil.InnovationSigil,\n\tmainHandImbue: WeaponImbue.WildStrikes,\n\toffHandImbue: WeaponImbue.DenseSharpeningStone,\n\tstrengthBuff: StrengthBuff.ElixirOfOgresStrength,\n\tarmorElixir: ArmorElixir.ElixirOfSuperiorDefense,\n\thealthElixir: HealthElixir.HealthElixirUnknown,\n\talcohol: Alcohol.AlcoholUnknown,\n\tdefaultPotion: Potions.MightyRagePotion,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdevotionAura: TristateEffect.TristateEffectImproved,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\tblessingOfKings: true,\n\tblessingOfWisdom: TristateEffect.TristateEffectRegular,\n\tsparkOfInspiration: true,\n\tsaygesFortune: SaygesFortune.SaygesDamage,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfRecklessness: true,\n\tfaerieFire: true,\n\thomunculi: 70, // 70% average uptime default\n\tmangle: true,\n\tsunderArmor: true,\n});\n\nexport const OtherDefaults = {\n\tprofession1: Profession.Enchanting,\n\tprofession2: Profession.Leatherworking,\n};\n","import * as OtherInputs from '../core/components/other_inputs.js';\nimport { Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport { Class, Faction, PartyBuffs, PseudoStat, Race, Spec, Stat } from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport * as WarriorInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecWarrior, {\n\tcssClass: 'warrior-sim-ui',\n\tcssScheme: 'warrior',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: ['Auto rotation is disabled until we can get optimized APL rotation',\n\t\t\t\t'Wrecking crew assumed as lowest priority of enrage. Overwritten by regular enrage'],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStrength, \n\t\tStat.StatAgility, \n\t\tStat.StatAttackPower, \n\t\tStat.StatMeleeHit, \n\t\tStat.StatMeleeCrit, \n\t\tStat.StatMeleeHaste, \n\t\tStat.StatStamina,\n\t\tStat.StatArmor],\n\tepPseudoStats: [PseudoStat.PseudoStatMainHandDps, PseudoStat.PseudoStatOffHandDps],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmor,\n\t],\n\tmodifyDisplayStats: (_: Player<Spec.SpecWarrior>) => {\n\t\tconst stats = new Stats();\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.GearFuryPhase2.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatStrength]: 2.72,\n\t\t\t\t[Stat.StatAgility]: 1.82,\n\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t[Stat.StatExpertise]: 2.55,\n\t\t\t\t[Stat.StatMeleeHit]: 0.79,\n\t\t\t\t[Stat.StatMeleeCrit]: 2.12,\n\t\t\t\t[Stat.StatMeleeHaste]: 1.72,\n\t\t\t\t[Stat.StatArmorPenetration]: 2.17,\n\t\t\t\t[Stat.StatArmor]: 0.03,\n\t\t\t},\n\t\t\t{\n\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 6.29,\n\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 3.58,\n\t\t\t},\n\t\t),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.TalentsPhase2Fury.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [WarriorInputs.ShoutPicker],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [WarriorInputs.StartingRage, WarriorInputs.StanceSnapshot, OtherInputs.TankAssignment, OtherInputs.InFrontOfTarget],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: true,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [...Presets.TalentPresets[Phase.Phase3], ...Presets.TalentPresets[Phase.Phase2], ...Presets.TalentPresets[Phase.Phase1]],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [...Presets.APLPresets[Phase.Phase3], ...Presets.APLPresets[Phase.Phase2], ...Presets.APLPresets[Phase.Phase1]],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [...Presets.GearPresets[Phase.Phase3], ...Presets.GearPresets[Phase.Phase2], ...Presets.GearPresets[Phase.Phase1]],\n\t},\n\n\tautoRotation: player => {\n\t\tthrow new Error(\"Auto rotation is disabled until we can get optimized APL rotation, choose 'APL' under Rotation Type dropdown\");\n\t\t// return Presets.DefaultAPLs[player.getLevel()][player.getTalentTree()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecWarrior,\n\t\t\ttooltip: 'Arms Warrior',\n\t\t\tdefaultName: 'Arms',\n\t\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 0),\n\n\t\t\ttalents: Presets.DefaultTalentsArms.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t\t2: Presets.GearPresets[Phase.Phase2][0].gear,\n\t\t\t\t\t3: Presets.GearPresets[Phase.Phase3][0].gear,\n\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t\t2: Presets.GearPresets[Phase.Phase2][0].gear,\n\t\t\t\t\t3: Presets.GearPresets[Phase.Phase3][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecWarrior,\n\t\t\ttooltip: 'Fury Warrior',\n\t\t\tdefaultName: 'Fury',\n\t\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 1),\n\n\t\t\ttalents: Presets.DefaultTalentsFury.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][1].gear,\n\t\t\t\t\t2: Presets.GearPresets[Phase.Phase2][1].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][1].gear,\n\t\t\t\t\t2: Presets.GearPresets[Phase.Phase2][1].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class WarriorSimUI extends IndividualSimUI<Spec.SpecWarrior> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarrior>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["StartingRage","InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","StanceSnapshot","InputHelpers.makeSpecOptionsBooleanInput","ShoutPicker","InputHelpers.makeSpecOptionsBooleanIconInput","actionId","ActionId","fromSpellId","value","WarriorShout","WarriorShoutBattle","GearArmsPhase1","PresetUtils.makePresetGear","Phase1Gear","talentTree","GearArmsDWPhase1","Phase1DWGear","GearArmsPhase2","Phase22HGear","GearFuryPhase1","GearFuryPhase2","Phase2DWGear","GearArmsPhase3","Phase32HGear","GearFuryPhase3","Phase3DWGear","GearPresets","Phase","Phase1","Phase2","Phase3","Phase4","Phase5","APLPhase1Arms","PresetUtils.makePresetAPLRotation","Phase1APLArms","APLPhase2Arms","Phase2APLArms","APLPhase2Fury","Phase2APLFury","APLPhase3Arms","Phase3APLArms","APLPhase3Fury","Phase3APLFury","APLPresets","TalentsPhase1","name","data","SavedTalents","create","talentsString","TalentsPhase2Fury","TalentsPhase2Arms","TalentsPhase3Arms","TalentPhase3Fury","TalentPresets","DefaultTalentsFury","DefaultTalentsArms","DefaultOptions","WarriorOptions","startingRage","useRecklessness","shout","DefaultConsumes","Consumes","agilityElixir","AgilityElixir","ElixirOfAgility","dragonBreathChili","enchantedSigil","EnchantedSigil","InnovationSigil","mainHandImbue","WeaponImbue","WildStrikes","offHandImbue","DenseSharpeningStone","strengthBuff","StrengthBuff","ElixirOfOgresStrength","armorElixir","ArmorElixir","ElixirOfSuperiorDefense","healthElixir","HealthElixir","HealthElixirUnknown","alcohol","Alcohol","AlcoholUnknown","defaultPotion","Potions","MightyRagePotion","DefaultRaidBuffs","RaidBuffs","battleShout","TristateEffect","TristateEffectImproved","devotionAura","giftOfTheWild","stoneskinTotem","DefaultIndividualBuffs","IndividualBuffs","blessingOfMight","blessingOfKings","blessingOfWisdom","TristateEffectRegular","sparkOfInspiration","saygesFortune","SaygesFortune","SaygesDamage","DefaultDebuffs","Debuffs","curseOfRecklessness","faerieFire","homunculi","mangle","sunderArmor","OtherDefaults","profession1","Profession","Enchanting","profession2","Leatherworking","SPEC_CONFIG","registerSpecConfig","Spec","SpecWarrior","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatStamina","StatArmor","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","modifyDisplayStats","_","talents","Stats","defaults","gear","Presets.GearFuryPhase2","epWeights","fromMap","StatExpertise","StatArmorPenetration","consumes","Presets.DefaultConsumes","Presets.TalentsPhase2Fury","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","WarriorInputs.ShoutPicker","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","inputs","WarriorInputs.StartingRage","WarriorInputs.StanceSnapshot","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","player","Error","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassWarrior","Presets.DefaultTalentsArms","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceOrc","defaultGear","Presets.DefaultTalentsFury","WarriorSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}